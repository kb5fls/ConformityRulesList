# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 20.0.686
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CommonObjectUnableToMigrate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_id': 'int',
        'error_message': 'str'
    }

    attribute_map = {
        'object_id': 'objectID',
        'error_message': 'errorMessage'
    }

    def __init__(self, object_id=None, error_message=None):  # noqa: E501
        """CommonObjectUnableToMigrate - a model defined in Swagger"""  # noqa: E501

        self._object_id = None
        self._error_message = None
        self.discriminator = None

        if object_id is not None:
            self.object_id = object_id
        if error_message is not None:
            self.error_message = error_message

    @property
    def object_id(self):
        """Gets the object_id of this CommonObjectUnableToMigrate.  # noqa: E501

        ID of the common object that cannot be migrated.  # noqa: E501

        :return: The object_id of this CommonObjectUnableToMigrate.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this CommonObjectUnableToMigrate.

        ID of the common object that cannot be migrated.  # noqa: E501

        :param object_id: The object_id of this CommonObjectUnableToMigrate.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def error_message(self):
        """Gets the error_message of this CommonObjectUnableToMigrate.  # noqa: E501

        Error message of the common object that cannot be migrated.  # noqa: E501

        :return: The error_message of this CommonObjectUnableToMigrate.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this CommonObjectUnableToMigrate.

        Error message of the common object that cannot be migrated.  # noqa: E501

        :param error_message: The error_message of this CommonObjectUnableToMigrate.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonObjectUnableToMigrate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonObjectUnableToMigrate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

