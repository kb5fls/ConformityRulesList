# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 20.0.686
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConnectorMigrationTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'connector_id': 'int',
        'status': 'str',
        'error_code': 'int',
        'created': 'datetime',
        'last_updated': 'datetime'
    }

    attribute_map = {
        'id': 'ID',
        'connector_id': 'connectorID',
        'status': 'status',
        'error_code': 'errorCode',
        'created': 'created',
        'last_updated': 'lastUpdated'
    }

    def __init__(self, id=None, connector_id=None, status=None, error_code=None, created=None, last_updated=None):  # noqa: E501
        """ConnectorMigrationTask - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._connector_id = None
        self._status = None
        self._error_code = None
        self._created = None
        self._last_updated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if connector_id is not None:
            self.connector_id = connector_id
        if status is not None:
            self.status = status
        if error_code is not None:
            self.error_code = error_code
        if created is not None:
            self.created = created
        if last_updated is not None:
            self.last_updated = last_updated

    @property
    def id(self):
        """Gets the id of this ConnectorMigrationTask.  # noqa: E501

        ID of the ConnectorMigrationTask.  # noqa: E501

        :return: The id of this ConnectorMigrationTask.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectorMigrationTask.

        ID of the ConnectorMigrationTask.  # noqa: E501

        :param id: The id of this ConnectorMigrationTask.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def connector_id(self):
        """Gets the connector_id of this ConnectorMigrationTask.  # noqa: E501

        ID of the Connector.  # noqa: E501

        :return: The connector_id of this ConnectorMigrationTask.  # noqa: E501
        :rtype: int
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this ConnectorMigrationTask.

        ID of the Connector.  # noqa: E501

        :param connector_id: The connector_id of this ConnectorMigrationTask.  # noqa: E501
        :type: int
        """

        self._connector_id = connector_id

    @property
    def status(self):
        """Gets the status of this ConnectorMigrationTask.  # noqa: E501

        Migration status.  # noqa: E501

        :return: The status of this ConnectorMigrationTask.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConnectorMigrationTask.

        Migration status.  # noqa: E501

        :param status: The status of this ConnectorMigrationTask.  # noqa: E501
        :type: str
        """
        allowed_values = ["requested", "in-progress", "complete", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def error_code(self):
        """Gets the error_code of this ConnectorMigrationTask.  # noqa: E501

        The error code of the failed task.  # noqa: E501

        :return: The error_code of this ConnectorMigrationTask.  # noqa: E501
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ConnectorMigrationTask.

        The error code of the failed task.  # noqa: E501

        :param error_code: The error_code of this ConnectorMigrationTask.  # noqa: E501
        :type: int
        """

        self._error_code = error_code

    @property
    def created(self):
        """Gets the created of this ConnectorMigrationTask.  # noqa: E501

        Timestamp when the ConnectorMigrationTask was created, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :return: The created of this ConnectorMigrationTask.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ConnectorMigrationTask.

        Timestamp when the ConnectorMigrationTask was created, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :param created: The created of this ConnectorMigrationTask.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def last_updated(self):
        """Gets the last_updated of this ConnectorMigrationTask.  # noqa: E501

        Timestamp when the ConnectorMigrationTask was updated, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :return: The last_updated of this ConnectorMigrationTask.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ConnectorMigrationTask.

        Timestamp when the ConnectorMigrationTask was updated, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :param last_updated: The last_updated of this ConnectorMigrationTask.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectorMigrationTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorMigrationTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

