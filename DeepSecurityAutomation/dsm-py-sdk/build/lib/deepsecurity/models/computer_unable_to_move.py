# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 20.0.686
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ComputerUnableToMove(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'computer_id': 'int',
        'computer_name': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'computer_id': 'computerID',
        'computer_name': 'computerName',
        'error_message': 'errorMessage'
    }

    def __init__(self, computer_id=None, computer_name=None, error_message=None):  # noqa: E501
        """ComputerUnableToMove - a model defined in Swagger"""  # noqa: E501

        self._computer_id = None
        self._computer_name = None
        self._error_message = None
        self.discriminator = None

        if computer_id is not None:
            self.computer_id = computer_id
        if computer_name is not None:
            self.computer_name = computer_name
        if error_message is not None:
            self.error_message = error_message

    @property
    def computer_id(self):
        """Gets the computer_id of this ComputerUnableToMove.  # noqa: E501

        ID of the computer that cannot be moved.  # noqa: E501

        :return: The computer_id of this ComputerUnableToMove.  # noqa: E501
        :rtype: int
        """
        return self._computer_id

    @computer_id.setter
    def computer_id(self, computer_id):
        """Sets the computer_id of this ComputerUnableToMove.

        ID of the computer that cannot be moved.  # noqa: E501

        :param computer_id: The computer_id of this ComputerUnableToMove.  # noqa: E501
        :type: int
        """

        self._computer_id = computer_id

    @property
    def computer_name(self):
        """Gets the computer_name of this ComputerUnableToMove.  # noqa: E501

        Name of the computer that cannot be moved.  # noqa: E501

        :return: The computer_name of this ComputerUnableToMove.  # noqa: E501
        :rtype: str
        """
        return self._computer_name

    @computer_name.setter
    def computer_name(self, computer_name):
        """Sets the computer_name of this ComputerUnableToMove.

        Name of the computer that cannot be moved.  # noqa: E501

        :param computer_name: The computer_name of this ComputerUnableToMove.  # noqa: E501
        :type: str
        """

        self._computer_name = computer_name

    @property
    def error_message(self):
        """Gets the error_message of this ComputerUnableToMove.  # noqa: E501

        Error message of the computer that cannot be moved.  # noqa: E501

        :return: The error_message of this ComputerUnableToMove.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ComputerUnableToMove.

        Error message of the computer that cannot be moved.  # noqa: E501

        :param error_message: The error_message of this ComputerUnableToMove.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComputerUnableToMove, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerUnableToMove):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

