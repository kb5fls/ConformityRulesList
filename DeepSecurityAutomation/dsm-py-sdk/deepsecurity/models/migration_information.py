# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 20.0.686
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MigrationInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workload_security_computer_groups': 'list[object]',
        'workload_security_policies': 'list[object]'
    }

    attribute_map = {
        'workload_security_computer_groups': 'workloadSecurityComputerGroups',
        'workload_security_policies': 'workloadSecurityPolicies'
    }

    def __init__(self, workload_security_computer_groups=None, workload_security_policies=None):  # noqa: E501
        """MigrationInformation - a model defined in Swagger"""  # noqa: E501

        self._workload_security_computer_groups = None
        self._workload_security_policies = None
        self.discriminator = None

        if workload_security_computer_groups is not None:
            self.workload_security_computer_groups = workload_security_computer_groups
        if workload_security_policies is not None:
            self.workload_security_policies = workload_security_policies

    @property
    def workload_security_computer_groups(self):
        """Gets the workload_security_computer_groups of this MigrationInformation.  # noqa: E501

        Computer groups in Workload Security.  # noqa: E501

        :return: The workload_security_computer_groups of this MigrationInformation.  # noqa: E501
        :rtype: list[object]
        """
        return self._workload_security_computer_groups

    @workload_security_computer_groups.setter
    def workload_security_computer_groups(self, workload_security_computer_groups):
        """Sets the workload_security_computer_groups of this MigrationInformation.

        Computer groups in Workload Security.  # noqa: E501

        :param workload_security_computer_groups: The workload_security_computer_groups of this MigrationInformation.  # noqa: E501
        :type: list[object]
        """

        self._workload_security_computer_groups = workload_security_computer_groups

    @property
    def workload_security_policies(self):
        """Gets the workload_security_policies of this MigrationInformation.  # noqa: E501

        Policies in Workload Security.  # noqa: E501

        :return: The workload_security_policies of this MigrationInformation.  # noqa: E501
        :rtype: list[object]
        """
        return self._workload_security_policies

    @workload_security_policies.setter
    def workload_security_policies(self, workload_security_policies):
        """Sets the workload_security_policies of this MigrationInformation.

        Policies in Workload Security.  # noqa: E501

        :param workload_security_policies: The workload_security_policies of this MigrationInformation.  # noqa: E501
        :type: list[object]
        """

        self._workload_security_policies = workload_security_policies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

