# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 20.0.686
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from deepsecurity.models.workload_security_proxy import WorkloadSecurityProxy  # noqa: F401,E501
from deepsecurity.models.workload_security_relay_proxy import WorkloadSecurityRelayProxy  # noqa: F401,E501


class BatchComputerMoveTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workload_security_policy_id': 'int',
        'workload_security_computer_group_id': 'int',
        'workload_security_relay_group_id': 'int',
        'workload_security_proxy': 'WorkloadSecurityProxy',
        'proxy_idto_contact_workload_security': 'int',
        'workload_security_relay_proxy': 'WorkloadSecurityRelayProxy',
        'proxy_idto_contact_workload_security_relay': 'int',
        'include_computer_overrides': 'bool',
        'include_computer_description': 'bool',
        'refer_to_latest_migrated_policy': 'bool',
        'computer_ids': 'list[int]'
    }

    attribute_map = {
        'workload_security_policy_id': 'workloadSecurityPolicyID',
        'workload_security_computer_group_id': 'workloadSecurityComputerGroupID',
        'workload_security_relay_group_id': 'workloadSecurityRelayGroupID',
        'workload_security_proxy': 'workloadSecurityProxy',
        'proxy_idto_contact_workload_security': 'proxyIDToContactWorkloadSecurity',
        'workload_security_relay_proxy': 'workloadSecurityRelayProxy',
        'proxy_idto_contact_workload_security_relay': 'proxyIDToContactWorkloadSecurityRelay',
        'include_computer_overrides': 'includeComputerOverrides',
        'include_computer_description': 'includeComputerDescription',
        'refer_to_latest_migrated_policy': 'referToLatestMigratedPolicy',
        'computer_ids': 'computerIDs'
    }

    def __init__(self, workload_security_policy_id=None, workload_security_computer_group_id=None, workload_security_relay_group_id=None, workload_security_proxy=None, proxy_idto_contact_workload_security=None, workload_security_relay_proxy=None, proxy_idto_contact_workload_security_relay=None, include_computer_overrides=None, include_computer_description=None, refer_to_latest_migrated_policy=None, computer_ids=None):  # noqa: E501
        """BatchComputerMoveTask - a model defined in Swagger"""  # noqa: E501

        self._workload_security_policy_id = None
        self._workload_security_computer_group_id = None
        self._workload_security_relay_group_id = None
        self._workload_security_proxy = None
        self._proxy_idto_contact_workload_security = None
        self._workload_security_relay_proxy = None
        self._proxy_idto_contact_workload_security_relay = None
        self._include_computer_overrides = None
        self._include_computer_description = None
        self._refer_to_latest_migrated_policy = None
        self._computer_ids = None
        self.discriminator = None

        if workload_security_policy_id is not None:
            self.workload_security_policy_id = workload_security_policy_id
        if workload_security_computer_group_id is not None:
            self.workload_security_computer_group_id = workload_security_computer_group_id
        if workload_security_relay_group_id is not None:
            self.workload_security_relay_group_id = workload_security_relay_group_id
        if workload_security_proxy is not None:
            self.workload_security_proxy = workload_security_proxy
        if proxy_idto_contact_workload_security is not None:
            self.proxy_idto_contact_workload_security = proxy_idto_contact_workload_security
        if workload_security_relay_proxy is not None:
            self.workload_security_relay_proxy = workload_security_relay_proxy
        if proxy_idto_contact_workload_security_relay is not None:
            self.proxy_idto_contact_workload_security_relay = proxy_idto_contact_workload_security_relay
        if include_computer_overrides is not None:
            self.include_computer_overrides = include_computer_overrides
        if include_computer_description is not None:
            self.include_computer_description = include_computer_description
        if refer_to_latest_migrated_policy is not None:
            self.refer_to_latest_migrated_policy = refer_to_latest_migrated_policy
        self.computer_ids = computer_ids

    @property
    def workload_security_policy_id(self):
        """Gets the workload_security_policy_id of this BatchComputerMoveTask.  # noqa: E501

        Policy ID in Workload Security.  # noqa: E501

        :return: The workload_security_policy_id of this BatchComputerMoveTask.  # noqa: E501
        :rtype: int
        """
        return self._workload_security_policy_id

    @workload_security_policy_id.setter
    def workload_security_policy_id(self, workload_security_policy_id):
        """Sets the workload_security_policy_id of this BatchComputerMoveTask.

        Policy ID in Workload Security.  # noqa: E501

        :param workload_security_policy_id: The workload_security_policy_id of this BatchComputerMoveTask.  # noqa: E501
        :type: int
        """

        self._workload_security_policy_id = workload_security_policy_id

    @property
    def workload_security_computer_group_id(self):
        """Gets the workload_security_computer_group_id of this BatchComputerMoveTask.  # noqa: E501

        Computer Group ID in Workload Security.  # noqa: E501

        :return: The workload_security_computer_group_id of this BatchComputerMoveTask.  # noqa: E501
        :rtype: int
        """
        return self._workload_security_computer_group_id

    @workload_security_computer_group_id.setter
    def workload_security_computer_group_id(self, workload_security_computer_group_id):
        """Sets the workload_security_computer_group_id of this BatchComputerMoveTask.

        Computer Group ID in Workload Security.  # noqa: E501

        :param workload_security_computer_group_id: The workload_security_computer_group_id of this BatchComputerMoveTask.  # noqa: E501
        :type: int
        """

        self._workload_security_computer_group_id = workload_security_computer_group_id

    @property
    def workload_security_relay_group_id(self):
        """Gets the workload_security_relay_group_id of this BatchComputerMoveTask.  # noqa: E501

        Relay Group ID in Workload Security.  # noqa: E501

        :return: The workload_security_relay_group_id of this BatchComputerMoveTask.  # noqa: E501
        :rtype: int
        """
        return self._workload_security_relay_group_id

    @workload_security_relay_group_id.setter
    def workload_security_relay_group_id(self, workload_security_relay_group_id):
        """Sets the workload_security_relay_group_id of this BatchComputerMoveTask.

        Relay Group ID in Workload Security.  # noqa: E501

        :param workload_security_relay_group_id: The workload_security_relay_group_id of this BatchComputerMoveTask.  # noqa: E501
        :type: int
        """

        self._workload_security_relay_group_id = workload_security_relay_group_id

    @property
    def workload_security_proxy(self):
        """Gets the workload_security_proxy of this BatchComputerMoveTask.  # noqa: E501

        Workload Security proxy for agent.  # noqa: E501

        :return: The workload_security_proxy of this BatchComputerMoveTask.  # noqa: E501
        :rtype: WorkloadSecurityProxy
        """
        return self._workload_security_proxy

    @workload_security_proxy.setter
    def workload_security_proxy(self, workload_security_proxy):
        """Sets the workload_security_proxy of this BatchComputerMoveTask.

        Workload Security proxy for agent.  # noqa: E501

        :param workload_security_proxy: The workload_security_proxy of this BatchComputerMoveTask.  # noqa: E501
        :type: WorkloadSecurityProxy
        """

        self._workload_security_proxy = workload_security_proxy

    @property
    def proxy_idto_contact_workload_security(self):
        """Gets the proxy_idto_contact_workload_security of this BatchComputerMoveTask.  # noqa: E501

        Deep Security proxy ID for the computer to contact to Workload Security.  # noqa: E501

        :return: The proxy_idto_contact_workload_security of this BatchComputerMoveTask.  # noqa: E501
        :rtype: int
        """
        return self._proxy_idto_contact_workload_security

    @proxy_idto_contact_workload_security.setter
    def proxy_idto_contact_workload_security(self, proxy_idto_contact_workload_security):
        """Sets the proxy_idto_contact_workload_security of this BatchComputerMoveTask.

        Deep Security proxy ID for the computer to contact to Workload Security.  # noqa: E501

        :param proxy_idto_contact_workload_security: The proxy_idto_contact_workload_security of this BatchComputerMoveTask.  # noqa: E501
        :type: int
        """

        self._proxy_idto_contact_workload_security = proxy_idto_contact_workload_security

    @property
    def workload_security_relay_proxy(self):
        """Gets the workload_security_relay_proxy of this BatchComputerMoveTask.  # noqa: E501

        Workload Security relay proxy of agent.  # noqa: E501

        :return: The workload_security_relay_proxy of this BatchComputerMoveTask.  # noqa: E501
        :rtype: WorkloadSecurityRelayProxy
        """
        return self._workload_security_relay_proxy

    @workload_security_relay_proxy.setter
    def workload_security_relay_proxy(self, workload_security_relay_proxy):
        """Sets the workload_security_relay_proxy of this BatchComputerMoveTask.

        Workload Security relay proxy of agent.  # noqa: E501

        :param workload_security_relay_proxy: The workload_security_relay_proxy of this BatchComputerMoveTask.  # noqa: E501
        :type: WorkloadSecurityRelayProxy
        """

        self._workload_security_relay_proxy = workload_security_relay_proxy

    @property
    def proxy_idto_contact_workload_security_relay(self):
        """Gets the proxy_idto_contact_workload_security_relay of this BatchComputerMoveTask.  # noqa: E501

        Deep Security proxy ID for the computer to contact to Workload Security relays.  # noqa: E501

        :return: The proxy_idto_contact_workload_security_relay of this BatchComputerMoveTask.  # noqa: E501
        :rtype: int
        """
        return self._proxy_idto_contact_workload_security_relay

    @proxy_idto_contact_workload_security_relay.setter
    def proxy_idto_contact_workload_security_relay(self, proxy_idto_contact_workload_security_relay):
        """Sets the proxy_idto_contact_workload_security_relay of this BatchComputerMoveTask.

        Deep Security proxy ID for the computer to contact to Workload Security relays.  # noqa: E501

        :param proxy_idto_contact_workload_security_relay: The proxy_idto_contact_workload_security_relay of this BatchComputerMoveTask.  # noqa: E501
        :type: int
        """

        self._proxy_idto_contact_workload_security_relay = proxy_idto_contact_workload_security_relay

    @property
    def include_computer_overrides(self):
        """Gets the include_computer_overrides of this BatchComputerMoveTask.  # noqa: E501

        Controls whether the Computer Move Task moves setting is overridden at the computer level. Defaults to `true`.  # noqa: E501

        :return: The include_computer_overrides of this BatchComputerMoveTask.  # noqa: E501
        :rtype: bool
        """
        return self._include_computer_overrides

    @include_computer_overrides.setter
    def include_computer_overrides(self, include_computer_overrides):
        """Sets the include_computer_overrides of this BatchComputerMoveTask.

        Controls whether the Computer Move Task moves setting is overridden at the computer level. Defaults to `true`.  # noqa: E501

        :param include_computer_overrides: The include_computer_overrides of this BatchComputerMoveTask.  # noqa: E501
        :type: bool
        """

        self._include_computer_overrides = include_computer_overrides

    @property
    def include_computer_description(self):
        """Gets the include_computer_description of this BatchComputerMoveTask.  # noqa: E501

        Controls whether the Computer Move Task moves the hostname, display name, and description. Defaults to `true`.  # noqa: E501

        :return: The include_computer_description of this BatchComputerMoveTask.  # noqa: E501
        :rtype: bool
        """
        return self._include_computer_description

    @include_computer_description.setter
    def include_computer_description(self, include_computer_description):
        """Sets the include_computer_description of this BatchComputerMoveTask.

        Controls whether the Computer Move Task moves the hostname, display name, and description. Defaults to `true`.  # noqa: E501

        :param include_computer_description: The include_computer_description of this BatchComputerMoveTask.  # noqa: E501
        :type: bool
        """

        self._include_computer_description = include_computer_description

    @property
    def refer_to_latest_migrated_policy(self):
        """Gets the refer_to_latest_migrated_policy of this BatchComputerMoveTask.  # noqa: E501

        Controls whether the last successfully migrated policies are assigned to the computers.  # noqa: E501

        :return: The refer_to_latest_migrated_policy of this BatchComputerMoveTask.  # noqa: E501
        :rtype: bool
        """
        return self._refer_to_latest_migrated_policy

    @refer_to_latest_migrated_policy.setter
    def refer_to_latest_migrated_policy(self, refer_to_latest_migrated_policy):
        """Sets the refer_to_latest_migrated_policy of this BatchComputerMoveTask.

        Controls whether the last successfully migrated policies are assigned to the computers.  # noqa: E501

        :param refer_to_latest_migrated_policy: The refer_to_latest_migrated_policy of this BatchComputerMoveTask.  # noqa: E501
        :type: bool
        """

        self._refer_to_latest_migrated_policy = refer_to_latest_migrated_policy

    @property
    def computer_ids(self):
        """Gets the computer_ids of this BatchComputerMoveTask.  # noqa: E501

        Target computers to move.  # noqa: E501

        :return: The computer_ids of this BatchComputerMoveTask.  # noqa: E501
        :rtype: list[int]
        """
        return self._computer_ids

    @computer_ids.setter
    def computer_ids(self, computer_ids):
        """Sets the computer_ids of this BatchComputerMoveTask.

        Target computers to move.  # noqa: E501

        :param computer_ids: The computer_ids of this BatchComputerMoveTask.  # noqa: E501
        :type: list[int]
        """
        if computer_ids is None:
            raise ValueError("Invalid value for `computer_ids`, must not be `None`")  # noqa: E501

        self._computer_ids = computer_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchComputerMoveTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchComputerMoveTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

